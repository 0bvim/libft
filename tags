!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
$(NAME)	Makefile	/^$(NAME): $(OBJS)$/;"	t
BOBJS	Makefile	/^BOBJS = $(BSRCS:.c=.o)$/;"	m
BONUS	Makefile	/^BONUS = ft_lstnew.c \\$/;"	m
BSRCS	Makefile	/^BSRCS = $(BONUS)$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -Werror -I.$/;"	m
CLEAR_COLOR	Makefile	/^CLEAR_COLOR := \\033[0m$/;"	m
Concatenating with header file `(.h)` and using Makefile to compile lib.	README.md	/^## Concatenating with header file `(.h)` and using Makefile to compile lib.$/;"	s
GREEN	Makefile	/^GREEN := \\033[32m$/;"	m
HEADER	Makefile	/^HEADER = libft.h$/;"	m
Header file	README.md	/^### Header file$/;"	S
LIBFT_H	libft.h	/^# define LIBFT_H$/;"	d
MANDATORY	Makefile	/^MANDATORY = ft_atoi.c \\$/;"	m
Make	README.md	/^### Make$/;"	S
NAME	Makefile	/^NAME = libft.a$/;"	m
OBJS	Makefile	/^OBJS = $(SRCS:.c=.o)$/;"	m
PRINT	Makefile	/^PRINT = printf$/;"	m
PRINT_CLEANED	Makefile	/^PRINT_CLEANED = $(PRINT) "$(GREEN)[-----'\\!cleaned!\/'-----]$(CLEAR_COLOR)\\n"$/;"	m
PRINT_DONE	Makefile	/^PRINT_DONE = $(PRINT) "$(GREEN)[-----'\\!done!\/'-----]$(CLEAR_COLOR)\\n"$/;"	m
SRCS	Makefile	/^SRCS = $(MANDATORY)$/;"	m
SessionLoad	Session.vim	/^let SessionLoad = 1$/;"	v
This is a project that I need to make my own lib replying function of `C`.	README.md	/^## This is a project that I need to make my own lib replying function of `C`.$/;"	s
`Libft`	README.md	/^# `Libft`$/;"	c
all	Makefile	/^all: $(NAME)$/;"	t
alloc_mem	ft_split.c	/^static void	alloc_mem(char **split_array, char const *s, char c)$/;"	f	typeref:typename:void	file:
bonus	Makefile	/^bonus:$/;"	t
clean	Makefile	/^clean:$/;"	t
content	libft.h	/^	void	*content;$/;"	m	struct:s_list	typeref:typename:void *
count_word	ft_split.c	/^static int	count_word(const char *s, char c)$/;"	f	typeref:typename:int	file:
fclean	Makefile	/^fclean: clean$/;"	t
fill_array	ft_split.c	/^static void	fill_array(char **result_array, const char *s, char c)$/;"	f	typeref:typename:void	file:
ft_atoi	ft_atoi.c	/^int	ft_atoi(const char *nptr)$/;"	f	typeref:typename:int
ft_bzero	ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f	typeref:typename:void
ft_calloc	ft_calloc.c	/^void	*ft_calloc(size_t nmemb, size_t size)$/;"	f	typeref:typename:void *
ft_end	ft_strtrim.c	/^size_t	ft_end(char const *s1, char const *set, size_t len)$/;"	f	typeref:typename:size_t
ft_feedback	ft_itoa.c	/^static int	ft_feedback(int *count, int n)$/;"	f	typeref:typename:int	file:
ft_isalnum	ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f	typeref:typename:int
ft_isalpha	ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f	typeref:typename:int
ft_isascii	ft_isascii.c	/^int	ft_isascii(int c)$/;"	f	typeref:typename:int
ft_isdigit	ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f	typeref:typename:int
ft_isprint	ft_isprint.c	/^int	ft_isprint(int c)$/;"	f	typeref:typename:int
ft_itoa	ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f	typeref:typename:char *
ft_lstnew	ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f	typeref:typename:t_list *
ft_memchr	ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_memcmp	ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f	typeref:typename:int
ft_memcpy	ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memmove	ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memset	ft_memset.c	/^void	*ft_memset(void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_putchar_fd	ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f	typeref:typename:void
ft_putendl_fd	ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_putnbr_fd	ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f	typeref:typename:void
ft_putstr_fd	ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_recursive_itoa	ft_itoa.c	/^static void	ft_recursive_itoa(unsigned int n, int count, char *str)$/;"	f	typeref:typename:void	file:
ft_split	ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f	typeref:typename:char **
ft_start	ft_strtrim.c	/^size_t	ft_start(char const *s1, char const *set)$/;"	f	typeref:typename:size_t
ft_str_len	ft_itoa.c	/^static char	*ft_str_len(unsigned int n, int *count)$/;"	f	typeref:typename:char *	file:
ft_strchr	ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strdup	ft_strdup.c	/^char	*ft_strdup(const char *s)$/;"	f	typeref:typename:char *
ft_striteri	ft_striteri.c	/^void	*ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f	typeref:typename:void *
ft_strjoin	ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
ft_strlcat	ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlcpy	ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlen	ft_strlen.c	/^size_t	ft_strlen(const char *str)$/;"	f	typeref:typename:size_t
ft_strmapi	ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f	typeref:typename:char *
ft_strncmp	ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f	typeref:typename:int
ft_strnstr	ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t len)$/;"	f	typeref:typename:char *
ft_strrchr	ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strtrim	ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f	typeref:typename:char *
ft_substr	ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f	typeref:typename:char *
ft_tolower	ft_tolower.c	/^int	ft_tolower(int c)$/;"	f	typeref:typename:int
ft_toupper	ft_toupper.c	/^int	ft_toupper(int c)$/;"	f	typeref:typename:int
implemented functions so far:	README.md	/^### implemented functions so far:$/;"	S
next	libft.h	/^	t_list	*next;$/;"	m	struct:s_list	typeref:typename:t_list *
re	Makefile	/^re: fclean all$/;"	t
s:l	Session.vim	/^let s:l = 1 - ((0 * winheight(0) + 21) \/ 43)$/;"	v
s:shortmess_save	Session.vim	/^let s:shortmess_save = &shortmess$/;"	v
s:so_save	Session.vim	/^let s:so_save = &g:so | let s:siso_save = &g:siso | setg so=0 siso=0 | setl so=-1 siso=-1$/;"	v
s:sx	Session.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:wipebuf	Session.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
s_list	libft.h	/^struct	s_list$/;"	s
t_list	libft.h	/^typedef struct s_list	t_list;$/;"	t	typeref:struct:s_list
